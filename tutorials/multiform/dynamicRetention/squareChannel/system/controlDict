/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     scalarTransportFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          1;

writeControl    timeStep;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

libs
(
"libextraBCs.so"
);

functions
{
    error
    {
        // Load the library containing the 'coded' functionObject
        libs
        (
            "libutilityFunctionObjects.so"
            "libextraBCs.so"
        );

        type coded;
        enabled false;
        // Name of on-the-fly generated functionObject
        name error;

        codeEnd
        #{

           // Lookup T
            Info<< "Looking up field T\n" << endl;
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");

            scalar K(2);
            scalar D(1);
            scalar F(0);

            dimensionedScalar A
            (
                "A",
                T.dimensions()/dimLength,
                (K + F)/(D - K*10)
            );

            dimensionedScalar T0("T0",T.dimensions(),scalar(1));
            dimensionedVector nx("nx",dimless,vector(1,0,0));


            volScalarField solution
            (
                IOobject
                (
                    "solution",
                    mesh().time().timeName(),
                    mesh(),
                    IOobject::NO_READ,
                    IOobject::AUTO_WRITE
                ),
                A*((mesh().C())&nx) + T0

            );

            solution.write();

            // Create Error field

            volScalarField errorField
            (
                IOobject
                (
                    "error",
                    mesh().time().timeName(),
                    mesh(),
                    IOobject::NO_READ,
                    IOobject::AUTO_WRITE
                ),
                mag(T-solution)/mag(solution)

            );


            Info<<"Writing relative error in T to " << errorField.objectPath()
                << endl;

            errorField.write();

            dimensionedScalar aveErr(errorField.weightedAverage(mesh().V()));

            Info<<"Average error : " << aveErr.value();
        #};
    }
}



// ************************************************************************* //
