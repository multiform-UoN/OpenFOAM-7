/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     scalarTransportFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          5;

writeControl    timeStep;

writeInterval   20;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    breakthrough
    {
        // Load the library containing the 'coded' functionObject
        libs            ("libutilityFunctionObjects.so");

        type coded;

        // Name of on-the-fly generated functionObject
        name breakthrough;

        codeWrite
        #{
            // Lookup c
            //Info<< "Looking up field c\n" << endl;
            //const volScalarField& c = mesh().lookupObject<volScalarField>("c");
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            //Get outlet patch
            label patchId = mesh().boundaryMesh().findPatchID("bottom");
            //const scalarField& cOut(c.boundaryField()[patchId]);
            const vectorField& Sf( mesh().Sf().boundaryField()[patchId]);
            const vectorField& Uout(U.boundaryField()[patchId]);

            //scalarField fluxOut(cOut*(Uout&Sf));
            scalarField fluxOut((Uout&Sf));

            scalar totFluxOut = gSum(fluxOut)/gSum(mesh().magSf().boundaryField()[patchId]);


//            std::ofstream file;
//            file.open("breakthrough.dat", std::ios::out | std::ios::app);
            Info << "Flux = " << mesh().time().timeName()
               << " " << totFluxOut <<"\n\n\n";
        #};
    }
}



// ************************************************************************* //
