/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField uniform (0 0 0);

boundaryField
{

    wall    
    {
        type            noSlip;
        //value           uniform (0 0 0);
    }

    side
    {
        type           zeroGradient;
    }

    frontAndBack
    {
        type            empty;
    }


	 topmid
    {   type fixedValue;
        value uniform (0 -1e-3 0);
    }

    bottom
    {
        //type fixedValue;
        //value (1e-3 -1e-3 0);
        type            codedFixedValue;
        value           uniform (0 0 0);

        redirectType    porousMembrane;

        code
        #{
 //         const tensor K(1e-7*tensor::I);
          // original permeability of the membrane
          const scalar Kl(1e-9);

          // membrane width
          const scalar L=1e-4;

          // lookup for pressure and concentration field from the solver
          const GeometricField<scalar, fvPatchField, volMesh>& pfield =
            this->db().objectRegistry::
                lookupObject<GeometricField<scalar, fvPatchField, volMesh> >("p");
          const GeometricField<scalar, fvPatchField, volMesh>& cfield =
            this->db().objectRegistry::
                lookupObject<GeometricField<scalar, fvPatchField, volMesh> >("c");
          label patchi=this->patch().index();
//          const volVectorField gradp(fvc::grad(pfield));

          // concentration on the membrane surface
          scalarField cc(cfield.boundaryField()[patchi]);

          // compute permeability of the membrane
          vectorField K
                        (
                          //this->size(),
                          vector(0,Kl/L,0) * exp(-cc)
                        );
          
          Info << "Average permeability " << gSum(K)/K.size() << endl;
          
          // set outlet velocity through the membrane
          // assuming the pressure outside is p=0
          operator==( - K*(pfield.boundaryField()[patchi]) );
                    //-K & gradp.boundaryField()[patchi]
        #};
        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude -I$(LIB_SRC)/meshTools/lnInclude
        #};

    }
}


// ************************************************************************* //
